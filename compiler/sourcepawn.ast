SourcePawnFile ::= Statements:Statement*;


abstract Statement;
EmptyStatement:Statement;
PreprocessorLine:Statement ::= <RawLine:String>;

Break:Statement;
Continue:Statement;
ExpressionStatement:Statement ::= Expr:Expression;

abstract Decl:Statement; 
Declaration ::= <Name:String> [Label:Label] Dims:Expression* <Flags:int>;
VarDecl:Decl ::= Var:Declaration [Init:Expression] [Next:VarDecl];

// Natives can just be an alias for another method. The other method may be stored in the Router.
Method:Decl ::= <Name:String> [Label:Label] <Flags:int> Args:VarDecl* [Body:Statement] /Router:IdentUse/;

FuncEnum:Decl ::= <Name:String> Methods:FuncEnumElement*;
FuncEnumElement:Statement ::= [Label:Label] Args:VarDecl*;

EnumStatement:Decl ::= <Name:String> Constants:EnumConstant*;
EnumConstant:Decl ::= Decl:Declaration [Init:Expression];

StructStatement:Decl ::= <Name:String> Fields:StructFieldDeclaration*;
StructFieldDeclaration:Decl ::= Decl:Declaration;

While:Statement ::= Condition:Expression Body:Statement;
DoWhile:While;
Switch:Statement ::= Expr:Expression Cases:SwitchCase* [Default:Statement];
SwitchCase:Statement ::= Expr:Expression* Body:Statement;

ForLoop:Statement ::= [Init:Statement] [Condition:Expression] Steps:Statement* Body:Statement;

Return:Statement ::= [Expr:Expression];
If:Statement ::= Condition:Expression TrueBranch:Statement [FalseBranch:Statement];

Block:Statement ::= Statements:Statement*;


abstract Expression;
EmptyExpression:Expression;

Assignment:Expression ::= <Operator:BinaryOp> LHS:Expression RHS:Expression;
TernaryExpression:Expression ::= Condition:Expression Left:Expression Right:Expression;
BinaryExpression:Expression ::= <Operator:BinaryOp> LHS:Expression RHS:Expression;

abstract Unary:Expression;
UnaryExpr:Expression ::= <Operator:UnaryOp> Expr:Expression;
IncDec:UnaryExpr ::= <Postfix:boolean>;
SizeOf:Unary ::= Name:IdentUse <Level:int>;
UnsafeCast:Unary ::= Label Expr:Expression;

abstract Primary:Expression;
Call:Primary ::= MethodName:IdentUse Arguments:Expression*;
Index:Primary ::= Base:Expression Index:Expression;


abstract Prefix:Expression;
IdentUse:Prefix ::= <ID:String>;
Label:Prefix ::= <ID:String>;
Parenthesis:Prefix ::= Expr:Expression;

// Primitives
abstract SPBoolean:Primitive;
abstract Primitive:Expression;
True:SPBoolean;
False:SPBoolean;
SPFloat:Primitive ::= <Float:String>;
SPInteger:Primitive ::= <Integer:String>;
SPString:Primitive ::= <String:String>;
SPCharacter:Primitive ::= <Char:String>;

ArrayLiteral:Primitive ::= Expressions:Expression* <RepeatLastElement:boolean>;
StructInitializer:Primitive ::= Elements:StructElement*;
StructElement ::= <Ident:String> Value:Expression;