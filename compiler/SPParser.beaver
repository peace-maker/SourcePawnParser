%header {:
package spbeaver.parser;
:};

%import "spbeaver.UnaryOperator.UnaryOp";
%import "spbeaver.BinaryOperator.BinaryOp";
%import "spbeaver.parser.DeclFlags";
%import "java.util.HashMap";
%import "java.util.LinkedList";
%import "java.io.IOException";
%import "spbeaver.preprocessor.SPPreprocessorScanner";
%import "spbeaver.preprocessor.SPPreprocessorParser";
%import "spbeaver.preprocessor.Preprocessor";
%import "spbeaver.preprocessor.PreprocessorHandler";
%import "java.io.ByteArrayInputStream";
%import "java.io.InputStreamReader";

%embed
{:
    // Own small exception class
    static public class Exception extends java.lang.Exception
    {
        public final Symbol symbol;
        public final int line;
        public final int column;
        public Exception(String msg)
        {
            super(msg);
            symbol = null;
            line = 0;
            column = 0;
        }
        public Exception(String msg, Symbol symbol)
        {
            super(msg);
            this.symbol = symbol;
            line = 0;
            column = 0;
        }
        public Exception(String msg, int line, int column)
        {
            super(msg);
            this.symbol = null;
            this.line = line;
            this.column = column;
        }
        
        public String getMessage() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            if (symbol != null) {
	            sb.append(Symbol.getLine(symbol.getStart()));
	            sb.append(',');
	            sb.append(Symbol.getColumn(symbol.getStart()));
	            sb.append('-');
	            sb.append(Symbol.getLine(symbol.getEnd()));
	            sb.append(',');
	            sb.append(Symbol.getColumn(symbol.getEnd()));
	            sb.append(" ");
	            /*sb.append(" (token ");
	            if (symbol.value != null)
	            {
	                sb.append('"');
	                sb.append(symbol.value);
	                sb.append('"');
	            }
	            else
	            {
	                sb.append('#');
	                sb.append(symbol.getId());
	            }
	            sb.append("): ");*/
	        }
	        else if (line > 0)
            {
                sb.append(line);
                sb.append(',');
                sb.append(column);
                sb.append(':');
            }
            sb.append(super.getMessage());
            return sb.toString();
        }
    }

    /** Parsing events notification "gateway" */
    protected Events report = new SPEvents(this);
    
    /** List of errors encountered during parsing */
    public LinkedList<SPParser.Exception> parseErrors = new LinkedList<SPParser.Exception>();
    
    /** List of preprocessor statements */
    public PreprocessorHandler preprocessor = new PreprocessorHandler(this, report);
    
    public IncludeManager includeManager = new IncludeManager(this);
    
    public SPParser(String inputFile) {
        this();
        includeManager.enterFile(inputFile);
    }
    
    /**
     * Implements parsing error recovery. Tries several simple approches first, like deleting "bad" token
     * or replacing the latter with one of the expected (if possible). If simple methods have not worked
     * out, tries to do error phrase recovery.
     * 
     * It is expected that normally descendand parsers do not need to alter this method. In same cases though
     * they may want to override it if they need a different error recovery strategy. 
     * 
     * @param token a lookahead terminal symbol that messed parsing 
     * @param in token stream
     * @throws IOException propagated from a scanner if it has issues with the source
     * @throws Parser.Exception if Parser cannot recover
     */
    protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
    {
        // TODO: Try to recover from errors by skipping to the next ; or end-of-line
        
        super.recoverFromError(token, in);
    }
    
    // Helper method to add a deprecated flag to method declarations,
    // if there was a #pragma deprecated line before.
    protected Method newMethod(String name, Opt<Label> label, int flags, List<VarDecl> params, Opt<Statement> body) {
        
        // There is a #pragma deprecated pending.
        // Add it to this declaration.
        String deprecatedMessage = "";
        if (preprocessor.isDeprecated()) {
            flags |= DeclFlags.DEPRECATED;
            deprecatedMessage = preprocessor.takeDeprecatedMessage();
        }
        
        if (name.startsWith("operator")) {
            flags |= DeclFlags.OPERATOR;
        }
        
        Method method = new Method(name, label, flags, params, body);
        method.setDeprecatedMessage(deprecatedMessage);
        return method;
    }
:};

%terminals INTEGERLIT, FLOATLIT, CHARLIT, STRINGLIT, IDENTIFIER, LABEL;
%terminals LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, SEMICOLON, COMMA;//, DOT;
%terminals ASSIGN, LT, GT, BANG, TILDE, QMARK, COLON, PLUS, MINUS, STAR, SLASH, AMPERSAND, BITOR, BITXOR, PERCENT;
%terminals ASSIGN_ADD, ASSIGN_SUB, ASSIGN_MUL, ASSIGN_DIV, ASSIGN_MOD, ASSIGN_BITAND;
%terminals ASSIGN_BITOR, ASSIGN_BITXOR, ASSIGN_SHR, ASSIGN_SHRU, ASSIGN_SHL;
%terminals EQ, LE, GE, NE, LOGICOR, LOGICAND, SHL, SHRU, SHR, INC, DEC;
%terminals ELLIPSES;//, DOUBLEDOT, DOUBLECOLON;

%terminals PREPROCESSOR;

//%terminals RESERVED;
%terminals BREAK, CASE, CONST, CONTINUE, DECL, DEFAULT, DO;
%terminals ELSE, ENUM, FALSE, FOR, FORWARD, FUNCENUM, FUNCTAG;
%terminals IF, NATIVE, NEW, OPERATOR, PUBLIC, RETURN, SIZEOF;
%terminals STOCK, STRUCT, SWITCH, STATIC, TRUE, WHILE;
//%terminals BREAK, CASE, CELLSOF, CONST, CONTINUE, DECL, DEFAULT, DO;
//%terminals ELSE, ENUM, FALSE, FOR, FORWARD, FUNCENUM, FUNCTAG, FUNCTION;
//%terminals GOTO, IF, NATIVE, NEW, OPERATOR, PUBLIC, RETURN, SIZEOF;
//%terminals STOCK, STRUCT, SWITCH, TAGOF, STATIC, TRUE, WHILE;

//%terminals CHAR, DELETE, FLOAT, INT, METHODMAP, NULL, NULLABLE;
//%terminals THIS, TYPEDEF, TYPESET, VIEWAS;

%left LPAREN, RPAREN;
%left STAR, SLASH, PERCENT;
%right PLUS, MINUS;
%left SHL, SHRU, SHR;
%left AMPERSAND;
%left BITXOR;
%left BITOR;
%left LT, LE, GT, GE;
%left EQ, NE;
%left LOGICAND;
%left LOGICOR;
%left QMARK, COLON;
%left ASSIGN, ASSIGN_ADD, ASSIGN_SUB, ASSIGN_MUL, ASSIGN_DIV, ASSIGN_MOD, ASSIGN_BITAND, ASSIGN_BITOR, ASSIGN_BITXOR, ASSIGN_SHR, ASSIGN_SHRU, ASSIGN_SHL;

%right MINUS;
%left INC, DEC, BANG, TILDE;
%left LABEL;
%left IDENTIFIER;

%typeof Preprocessor = "Statement";

%typeof GlobalStatementList = "List<Statement>";
%typeof Statement = "Statement";
%typeof StatementList = "List<Statement>";
%typeof StmtNoLocals = "Statement";
%typeof Stmt = "Statement";
%typeof GlobalVariable = "Statement";
%typeof GlobalVarDecl = "VarDecl";
%typeof GlobalInit = "Expression";
%typeof LocalVariable = "Statement";
%typeof LocalVarDecl = "VarDecl";
%typeof Declaration = "Declaration";
%typeof OldDeclVar = "Declaration";
%typeof OldArrayDim = "List<Expression>";
%typeof Init = "Expression";

%typeof Modifiers = "Integer";
%typeof ModifiersList = "Integer";
%typeof Declarator = "Integer";
%typeof OldDeclArg = "Declaration";
%typeof Arguments = "List<VarDecl>";
%typeof MethodBody = "Statement";
%typeof Method = "Statement";
%typeof NativeDecl = "Statement";
%typeof ForwardDecl = "Statement";
%typeof FunctagDecl = "Statement";
%typeof FuncenumDecl = "Statement";
%typeof FuncenumMethodList = "List<FuncEnumElement>";
%typeof StructDecl = "Statement";
%typeof StructFieldDeclaration = "StructFieldDeclaration";
%typeof StructElements = "List<StructFieldDeclaration>";
%typeof Global = "Statement";

%typeof Block = "Statement";
%typeof ExprStmt = "Statement";
%typeof While = "Statement";
%typeof DoWhile = "Statement";
%typeof CaseList = "List<SwitchCase>";
%typeof Switch = "Statement";
%typeof DefaultCase = "Statement";
%typeof For = "Statement";
%typeof ForInit = "Statement";
%typeof ForStep = "List<Statement>";
%typeof Return = "Statement";
%typeof If = "Statement";

%typeof Enum = "Statement";
%typeof EnumConstant = "List<EnumConstant>";

%typeof Expression = "Expression";
%typeof LeftHandSide = "Expression";
%typeof Assignment = "Expression";
%typeof AssignmentOperator = "BinaryOp";

%typeof Ternary = "Expression";
%typeof Or = "Expression";
%typeof And = "Expression";

%typeof Equals = "Expression";
%typeof EqualsOperator = "BinaryOp";

%typeof Relational = "Expression";
%typeof RelationalOperator = "BinaryOp";

%typeof BitOr = "Expression";
%typeof BitXor = "Expression";
%typeof BitAnd = "Expression";

%typeof Shift = "Expression";
%typeof ShiftOperator = "BinaryOp";

%typeof Addition = "Expression";
%typeof AdditionOperator = "BinaryOp";

%typeof Multiplication = "Expression";
%typeof MultiplicationOperator = "BinaryOp";

%typeof Unary = "Expression";
%typeof SizeOf = "Expression";
%typeof EmptyDims = "Integer";
%typeof ArrayAccess = "Expression";
%typeof Primary = "Expression";
%typeof Postfix = "Expression";
%typeof Prefix = "Expression";
%typeof Primitive = "Expression";
%typeof Boolean = "SPBoolean";
%typeof CompoundLiteral = "ArrayLiteral";
%typeof StructInitializer = "List<StructElement>";
%typeof ExpressionList = "List<Expression>";
%typeof Identifier = "IdentUse";
%typeof IdentOrOperator = "String";
%typeof Label = "Label";

%typeof INTEGERLIT, FLOATLIT, CHARLIT, STRINGLIT, IDENTIFIER, LABEL, PREPROCESSOR = "String";

%typeof Goal = "SourcePawnFile";
%goal Goal;

// Preprocessor lines are parsed right when they're lexed in the scanner.
Preprocessor = PREPROCESSOR.pre {: return new PreprocessorLine(pre); :};

Goal = GlobalStatementList.s {: return new SourcePawnFile(s); :}
;

GlobalStatementList = Global.g
					{:
						List<Statement> l = new List<>();
						l.add(g);
						return new Symbol(l);
					:}
					| GlobalStatementList.l Global.g
					{:
						l.add(g);
						return _symbol_l;
					:}
;

Statement = Stmt.stmt;
Stmt = LocalVariable.v Term
	 | StmtNoLocals
;

StmtNoLocals = Block
			 | For
			 | While
			 | DoWhile.do Term
			 | Switch
			 | Return.return Term
			 | If
			 | BREAK Term {: return new Break(); :}
			 | CONTINUE Term {: return new Continue(); :}
			 | Enum.enum Term
			 | ExprStmt.exprstmt Term
			 | Preprocessor
;

StatementList = Statement.s
			  {:
			  	List<Statement> l = new List<>();
			  	l.add(s);
			  	return new Symbol(l);
			  :}
			  | StatementList.l Statement.s
			  {:
			  	l.add(s);
			  	return _symbol_l;
			  :}
;

Block = LBRACE RBRACE {: return new Block(new List<Statement>()); :}
	  | LBRACE StatementList.l RBRACE {: return new Block(l); :}
;

ExprStmt = Assignment.a {: return new ExpressionStatement(a); :}; // TODO: Why no Expression

Modifiers = STATIC {: return new Symbol(DeclFlags.STATIC); :} 
		  | CONST {: return new Symbol(DeclFlags.CONST); :}
		  | PUBLIC {: return new Symbol(DeclFlags.PUBLIC); :}
		  | STOCK {: return new Symbol(DeclFlags.STOCK); :}
;
ModifiersList = Modifiers.mod
              | ModifiersList.l Modifiers.mod
              {:
                return new Symbol(l | mod);
              :}
;

Declarator = NEW {: return new Symbol(DeclFlags.NONE); :}
		   | DECL {: return new Symbol(DeclFlags.NONE); :}
;

GlobalVariable = ModifiersList.m GlobalVarDecl.d
               {:
                    // Add modifier flags to declaration
                    Declaration decl = ((VarDecl)d).getVar();
                    decl.setFlags( decl.getFlags() | m );
                    return _symbol_d;
               :}
               | Declarator GlobalVarDecl.d
;

GlobalVarDecl = Declaration.decl GlobalInit.init? 
            {: 
                return new VarDecl(decl, init!=null?new Opt<Expression>(init):new Opt<Expression>(), new Opt<VarDecl>());
            :}
            | GlobalVarDecl.prev COMMA Declaration.decl GlobalInit.init?
            {:
                decl.setFlags( (decl.getFlags() | DeclFlags.INLINE) & ~DeclFlags.NEW );
                VarDecl d = new VarDecl(decl, init!=null?new Opt<Expression>(init):new Opt<Expression>(), new Opt<VarDecl>());
                VarDecl next = prev;
                while(next.hasNext())
                    next = next.getNext();
                next.setNext(d);
                return _symbol_prev;
            :}
;

GlobalInit = ASSIGN LBRACE StructInitializer.s COMMA? RBRACE {: return new StructInitializer(s); :}
           | ASSIGN Expression.e
;

// Special case for struct initializers in global scope
// public Plugin:myinfo = { name = "some", author = "me" };
StructInitializer = IDENTIFIER.id ASSIGN Expression.e
                  {:
                    List<StructElement> l = new List<>();
                    l.add(new StructElement(id, e));
                    return new Symbol(l);
                  :}
                  | StructInitializer.s COMMA IDENTIFIER.id ASSIGN Expression.e
                  {:
                    s.add(new StructElement(id, e));
                    return _symbol_s;
                  :}
;

// Local variables
LocalVariable = ModifiersList.m LocalVarDecl.d 
			  {:
			  		// Add modifier flags to declaration
			  		Declaration decl = ((VarDecl)d).getVar();
			  		decl.setFlags( decl.getFlags() | m );
			  		return _symbol_d;
			  :}
			  | Declarator LocalVarDecl.d
;

LocalVarDecl = Declaration.decl Init.init? 
			{: 
				return new VarDecl(decl, init!=null?new Opt<Expression>(init):new Opt<Expression>(), new Opt<VarDecl>());
			:}
			| LocalVarDecl.prev COMMA Declaration.decl Init.init?
			{:
			  	decl.setFlags( (decl.getFlags() | DeclFlags.INLINE) & ~DeclFlags.NEW );
				VarDecl d = new VarDecl(decl, init!=null?new Opt<Expression>(init):new Opt<Expression>(), new Opt<VarDecl>());
				VarDecl next = prev;
				while(next.hasNext())
					next = next.getNext();
				next.setNext(d);
				return _symbol_prev;
			:}
;
Init = ASSIGN Expression.e // Initialization
;

Declaration = OldDeclVar;

OldDeclVar = Label.label IDENTIFIER.name OldArrayDim.dims?
		   {: return new Declaration(name, new Opt<Label>(label), dims==null?new List<Expression>():dims, DeclFlags.NEW); :}
		   | IDENTIFIER.name OldArrayDim.dims?
		   {: return new Declaration(name, new Opt<Label>(), dims==null?new List<Expression>():dims, DeclFlags.NEW); :}
;

OldArrayDim = LBRACKET Expression.e? RBRACKET // size unspecified
			{: List<Expression> l = new List<Expression>();
			   	l.add(e==null?new EmptyExpression():e);
			   	return l;
			:}
			| OldArrayDim.dims LBRACKET Expression.e? RBRACKET
			{:
			   	dims.add(e==null?new EmptyExpression():e);
			   	return _symbol_dims;
			:}
;

// Functions
OldDeclArg = Label.label ELLIPSES // Variadic
		   {:
		   		return new Declaration("", new Opt<Label>(label), new List(), DeclFlags.VARIADIC);
		   :}
		   | ELLIPSES // Variadic
           {:
                return new Declaration("", new Opt<Label>(), new List(), DeclFlags.VARIADIC);
           :}
		   | CONST AMPERSAND Label.label IDENTIFIER.name OldArrayDim.dims?
           {:
                return new Declaration(name, new Opt<Label>(label), dims==null?new List():dims, DeclFlags.REFERENCE|DeclFlags.CONST);
           :}
		   | CONST AMPERSAND IDENTIFIER.name OldArrayDim.dims?
		   {:
		   		return new Declaration(name, new Opt<Label>(), dims==null?new List():dims, DeclFlags.REFERENCE|DeclFlags.CONST);
		   :}
		   | CONST Label.label IDENTIFIER.name OldArrayDim.dims?
           {:
                return new Declaration(name, new Opt<Label>(label), dims==null?new List():dims, DeclFlags.CONST);
           :}
		   | CONST IDENTIFIER.name OldArrayDim.dims?
		   {:
		   		return new Declaration(name, new Opt<Label>(), dims==null?new List():dims, DeclFlags.CONST);
		   :}
		   | AMPERSAND Label.label IDENTIFIER.name OldArrayDim.dims?
		   {:
		   		return new Declaration(name, new Opt<Label>(label), dims==null?new List():dims, DeclFlags.REFERENCE);
		   :}
		   | AMPERSAND IDENTIFIER.name OldArrayDim.dims?
           {:
                return new Declaration(name, new Opt<Label>(), dims==null?new List():dims, DeclFlags.REFERENCE);
           :}
		   | Label.label IDENTIFIER.name OldArrayDim.dims?
		   {:
		   		return new Declaration(name, new Opt<Label>(label), dims==null?new List():dims, DeclFlags.NONE);
		   :}
		   | IDENTIFIER.name OldArrayDim.dims?
           {:
                return new Declaration(name, new Opt<Label>(), dims==null?new List():dims, DeclFlags.NONE);
           :}
;

Arguments = OldDeclArg.decl Init.init?
		  {:
		  		List<VarDecl> l = new List<>();
			  	decl.setFlags( decl.getFlags() | DeclFlags.INLINE );
		  		l.add(new VarDecl(decl, init!=null?new Opt<Expression>(init):new Opt<Expression>(), new Opt<VarDecl>()));
		  		return new Symbol(l);
		  :}
		  | Arguments.l COMMA OldDeclArg.decl Init.init?
		  {:
			  	decl.setFlags( decl.getFlags() | DeclFlags.INLINE );
		  		l.add(new VarDecl(decl, init!=null?new Opt<Expression>(init):new Opt<Expression>(), new Opt<VarDecl>()));
		  		return _symbol_l;
		  :}
;

MethodBody = Block; // TODO: Warn on single statement bodys. Prefer braced blocks.

Method = ModifiersList.mod Label.label IdentOrOperator.name LPAREN Arguments.args? RPAREN MethodBody.body
	   {:
	   		return newMethod(name, new Opt<Label>(label), mod, args==null?new List<VarDecl>():args, new Opt<Statement>(body));
	   :}
	   | ModifiersList.mod IdentOrOperator.name LPAREN Arguments.args? RPAREN MethodBody.body
	   {:
	   		return newMethod(name, new Opt<Label>(), mod, args==null?new List<VarDecl>():args, new Opt<Statement>(body));
	   :}
	   | Label.label IdentOrOperator.name LPAREN Arguments.args? RPAREN MethodBody.body
	   {:
	   		return newMethod(name, new Opt<Label>(label), DeclFlags.NONE, args==null?new List<VarDecl>():args, new Opt<Statement>(body));
	   :}
	   | IdentOrOperator.name LPAREN Arguments.args? RPAREN MethodBody.body
	   {:
	   		return newMethod(name, new Opt<Label>(), DeclFlags.NONE, args==null?new List<VarDecl>():args, new Opt<Statement>(body));
	   :}
;



NativeDecl = NATIVE IdentOrOperator.name LPAREN Arguments.args? RPAREN
		  {:
		  		return newMethod(name, new Opt<Label>(), DeclFlags.NATIVE, args==null?new List<VarDecl>():args, new Opt<Statement>());
		  :}
		  | NATIVE Label.label IdentOrOperator.name LPAREN Arguments.args? RPAREN
		  {:
		  		return newMethod(name, new Opt<Label>(label), DeclFlags.NATIVE, args==null?new List<VarDecl>():args, new Opt<Statement>());
		  :}
		  | NATIVE IdentOrOperator.name LPAREN Arguments.args? RPAREN ASSIGN Identifier.alias
          {:
                Method method = newMethod(name, new Opt<Label>(), DeclFlags.NATIVE, args==null?new List<VarDecl>():args, new Opt<Statement>());
                method.setChild(alias, method.getRouterChildPosition());
                return method;
          :}
          | NATIVE Label.label IdentOrOperator.name LPAREN Arguments.args? RPAREN ASSIGN Identifier.alias
          {:
                Method method = newMethod(name, new Opt<Label>(label), DeclFlags.NATIVE, args==null?new List<VarDecl>():args, new Opt<Statement>());
                method.setChild(alias, method.getRouterChildPosition());
                return method;
          :}
;

ForwardDecl = FORWARD IdentOrOperator.name LPAREN Arguments.args? RPAREN
			{:
				return newMethod(name, new Opt<Label>(), DeclFlags.FORWARD, args==null?new List<VarDecl>():args, new Opt<Statement>());
			:}
			| FORWARD Label.label IdentOrOperator.name LPAREN Arguments.args? RPAREN
			{:
				return newMethod(name, new Opt<Label>(label), DeclFlags.FORWARD, args==null?new List<VarDecl>():args, new Opt<Statement>());
			:}
;

FunctagDecl = FUNCTAG PUBLIC IDENTIFIER.name LPAREN Arguments.args? RPAREN
            {:
                return newMethod(name, new Opt<Label>(), DeclFlags.FUNCTAG|DeclFlags.PUBLIC, args==null?new List<VarDecl>():args, new Opt<Statement>());
            :}
            | FUNCTAG PUBLIC Label.label IDENTIFIER.name LPAREN Arguments.args? RPAREN
            {:
                return newMethod(name, new Opt<Label>(label), DeclFlags.FUNCTAG|DeclFlags.PUBLIC, args==null?new List<VarDecl>():args, new Opt<Statement>());
            :}
            // Syntax is mixed up in some includes ...
            | FUNCTAG IDENTIFIER.name PUBLIC LPAREN Arguments.args? RPAREN
            {:
                return newMethod(name, new Opt<Label>(), DeclFlags.FUNCTAG|DeclFlags.PUBLIC, args==null?new List<VarDecl>():args, new Opt<Statement>());
            :}
            | FUNCTAG IDENTIFIER.name Label.label PUBLIC LPAREN Arguments.args? RPAREN
            {:
                return newMethod(name, new Opt<Label>(label), DeclFlags.FUNCTAG|DeclFlags.PUBLIC, args==null?new List<VarDecl>():args, new Opt<Statement>());
            :}
;

FuncenumDecl = FUNCENUM IDENTIFIER.name LBRACE FuncenumMethodList.methods COMMA? RBRACE
             {:
                return new FuncEnum(name, methods);
             :}
;

FuncenumMethodList = PUBLIC LPAREN Arguments.args? RPAREN
                   {:
                        List<FuncEnumElement> l = new List<FuncEnumElement>();
                        l.add(new FuncEnumElement(new Opt<Label>(), args==null?new List<VarDecl>():args));
                        return new Symbol(l);
                   :}
                   | Label.label PUBLIC LPAREN Arguments.args? RPAREN
                   {:
                        List<FuncEnumElement> l = new List<FuncEnumElement>();
                        l.add(new FuncEnumElement(new Opt<Label>(label), args==null?new List<VarDecl>():args));
                        return new Symbol(l);
                   :}
                   | FuncenumMethodList.l COMMA PUBLIC LPAREN Arguments.args? RPAREN
                   {:
                        l.add(new FuncEnumElement(new Opt<Label>(), args==null?new List<VarDecl>():args));
                        return _symbol_l;
                   :}
                   | FuncenumMethodList.l COMMA Label.label PUBLIC LPAREN Arguments.args? RPAREN
                   {:
                        l.add(new FuncEnumElement(new Opt<Label>(label), args==null?new List<VarDecl>():args));
                        return _symbol_l;
                   :}
;

StructDecl = STRUCT IDENTIFIER.name LBRACE StructElements.elements COMMA? RBRACE
          {:
                return new StructStatement(name, elements);
          :}
;
StructFieldDeclaration = Declaration.decl {: return new StructFieldDeclaration(decl); :};

StructElements = StructFieldDeclaration.elem
               {:
                    List<StructFieldDeclaration> l = new List<StructFieldDeclaration>();
                    l.add(elem);
                    return new Symbol(l);
               :}
               | ModifiersList.m StructFieldDeclaration.elem
               {:
                    List<StructFieldDeclaration> l = new List<StructFieldDeclaration>();
                    Declaration decl = elem.getDecl();
                    decl.setFlags( decl.getFlags() | m );
                    l.add(elem);
                    return new Symbol(l);
               :}
               | StructElements.l COMMA StructFieldDeclaration.elem
               {:
                    l.add(elem);
                    return _symbol_l;
               :}
               | StructElements.l COMMA ModifiersList.m StructFieldDeclaration.elem
               {:
                    Declaration decl = elem.getDecl();
                    decl.setFlags( decl.getFlags() | m );
                    l.add(elem);
                    return _symbol_l;
               :}
;

Enum = ENUM IDENTIFIER.name? LBRACE RBRACE
     {: return new EnumStatement(name==null?"":name, new List<EnumConstant>()); :}
     | ENUM IDENTIFIER.name? LBRACE EnumConstant.constants COMMA? RBRACE
     {: return new EnumStatement(name==null?"":name, constants==null?new List<EnumConstant>():constants); :}
;

EnumConstant = Declaration.decl Init.init?
            {:
                List<EnumConstant> l = new List<>();
                l.add(new EnumConstant(decl, init==null?new Opt<Expression>():new Opt<Expression>(init)));
                return new Symbol(l);
            :}
            | EnumConstant.l COMMA Declaration.decl Init.init?
            {:
                l.add(new EnumConstant(decl, init==null?new Opt<Expression>():new Opt<Expression>(init)));
                return _symbol_l;
            :}
;

Global = GlobalVariable.v Term?
	   | NativeDecl.n Term
	   | ForwardDecl.f Term
	   | FunctagDecl.f Term
	   | FuncenumDecl.e Term
	   | Method
	   | StructDecl.struct Term
	   | Enum.enum Term
	   | Preprocessor
;

// Statements
While = WHILE LPAREN Expression.e RPAREN StmtNoLocals.s {: return new While(e, s); :};
DoWhile = DO Block.s WHILE LPAREN Expression.e RPAREN {: return new DoWhile(e, s); :};

Switch = SWITCH LPAREN Expression.e RPAREN LBRACE CaseList.cases DefaultCase.def? RBRACE
	   {: return new Switch(e, cases, def==null?new Opt<Statement>():new Opt<Statement>(def)); :}
;
// FIXME: Handle LABEL matches for |Identifier:| cases
CaseList = CASE Label.label StmtNoLocals.s
		 {:
		 	List<SwitchCase> l = new List<>();
		 	List<Expression> e = new List<>();
		 	e.add(new IdentUse(label.getID()));
		 	l.add(new SwitchCase(e, s));
		 	return new Symbol(l);
		 :} 
		 | CASE ExpressionList.e COMMA Label.label StmtNoLocals.s
		 {:
		 	List<SwitchCase> l = new List<>();
		 	e.add(new IdentUse(label.getID()));
		 	l.add(new SwitchCase(e, s));
		 	return new Symbol(l);
		 :}
		 | CASE ExpressionList.e COLON StmtNoLocals.s
		 {:
		 	List<SwitchCase> l = new List<>();
		 	l.add(new SwitchCase(e, s));
		 	return new Symbol(l);
		 :}
		 | CaseList.l CASE Label.label StmtNoLocals.s
		 {:
		 	List<Expression> e = new List<>();
		 	e.add(new IdentUse(label.getID()));
		 	l.add(new SwitchCase(e, s));
		 	return _symbol_l;
		 :}
		 | CaseList.l CASE ExpressionList.e COMMA Label.label StmtNoLocals.s
		 {:
		 	e.add(new IdentUse(label.getID()));
		 	l.add(new SwitchCase(e, s));
		 	return _symbol_l;
		 :}
		 | CaseList.l CASE ExpressionList.e COLON StmtNoLocals.s
		 {:
		 	l.add(new SwitchCase(e, s));
		 	return _symbol_l;
		 :}
;
DefaultCase = DEFAULT COLON StmtNoLocals.s
			| Label.l StmtNoLocals.s
			{:
				// FIXME: catch actual errors.
				if(!l.getID().equals("default"))
					report.syntaxError(l); 
				return s;
			:}
;

For = FOR LPAREN ForInit.init? SEMICOLON Expression.cond? SEMICOLON ForStep.step? RPAREN StmtNoLocals.body
	{: return new ForLoop(init==null?new Opt<Statement>():new Opt<Statement>(init), 
						  cond==null?new Opt<Expression>():new Opt<Expression>(cond), 
						  step==null?new List<Statement>():step, 
						  body); 
	:}
;
ForInit = Declarator LocalVarDecl.d
		{:
			Declaration decl = ((VarDecl)d).getVar();
	  		decl.setFlags( decl.getFlags() | DeclFlags.INLINE );
	  		return _symbol_d;
		:}
		| ExprStmt
;

ForStep = ExprStmt.s
        {:
            List<Statement> l = new List<Statement>();
            l.add(s);
            return new Symbol(l);
        :}
        | ForStep.l COMMA ExprStmt.s
        {:
            l.add(s);
            return _symbol_l;           
        :}
;

Return = RETURN Expression.e? {: return new Return(e==null?new Opt<Expression>():new Opt<Expression>(e)); :};

If = IF LPAREN Expression.cond RPAREN StmtNoLocals.trueBranch
   {:
   		return new If(cond, trueBranch, new Opt<Statement>());	
   :}
   | If.outer ELSE StmtNoLocals.falseBranch
   {:
   		((If) outer).setFalseBranch(falseBranch);
   		return _symbol_outer;
   :}
;


// EXPRESSIONS
Expression = Assignment;
ExpressionList = Expression.e
				{: 
				   List<Expression> l = new List<>();
				   l.add(e);
				   return new Symbol(l);
				:}
			   | ExpressionList.l COMMA Expression.e
			   	{:
			   	  l.add(e);
			   	  return _symbol_l;
			   	:}
;

LeftHandSide = Identifier
			 | ArrayAccess
;

Assignment = Ternary
		   | LeftHandSide.lhs AssignmentOperator.op Assignment.rhs
		   {:
		   		return new Assignment(op, lhs, rhs);
		   :}
;

AssignmentOperator = ASSIGN {: return new Symbol(BinaryOp.NONE); :}
				   | ASSIGN_ADD {: return new Symbol(BinaryOp.PLUS); :}
				   | ASSIGN_SUB {: return new Symbol(BinaryOp.MINUS); :}
				   | ASSIGN_MUL {: return new Symbol(BinaryOp.MUL); :}
				   | ASSIGN_DIV {: return new Symbol(BinaryOp.DIV); :}
				   | ASSIGN_MOD {: return new Symbol(BinaryOp.MOD); :}
				   | ASSIGN_BITAND {: return new Symbol(BinaryOp.BITAND); :}
				   | ASSIGN_BITOR {: return new Symbol(BinaryOp.BITOR); :}
				   | ASSIGN_BITXOR {: return new Symbol(BinaryOp.BITXOR); :}
				   | ASSIGN_SHR {: return new Symbol(BinaryOp.SHR); :}
				   | ASSIGN_SHRU {: return new Symbol(BinaryOp.SHRU); :}
				   | ASSIGN_SHL {: return new Symbol(BinaryOp.SHL); :}
;

Ternary = Or
		//| Or.cond QMARK Label.l Expression.right
		//{:
			// A ? B:C would normally get evaluated as NAME QMARK LABEL NAME, but we
    		// special case it here so that the LABEL becomes NAME and the colon gets
    		// stolen.
		//	return new TernaryExpression(cond, new Identifier(l.getID()), right);
		//:}
		| Or.cond QMARK Expression.left COLON Expression.right
		{:
			return new TernaryExpression(cond, left, right);
		:}
;
Or = And
   | And.lhs LOGICOR Or.rhs
   {:
   		return new BinaryExpression(BinaryOp.OR, lhs, rhs);
   :}
;
And = Equals
    | Equals.lhs LOGICAND And.rhs
    {:
    	return new BinaryExpression(BinaryOp.AND, lhs, rhs);
    :}
;
Equals = Relational
		 | Relational.lhs EqualsOperator.op Equals.rhs
		 {:
		 	return new BinaryExpression(op, lhs, rhs);
		 :}
;
EqualsOperator = EQ {: return new Symbol(BinaryOp.EQ); :}
			   | NE {: return new Symbol(BinaryOp.NE); :}
;

Relational = BitOr
		   | BitOr.lhs RelationalOperator.op BitOr.rhs // FIXME: error report: don't allow chained relationals a < b > c
		   {:
		  		return new BinaryExpression(op, lhs, rhs);
		   :}
;
RelationalOperator = LT {: return new Symbol(BinaryOp.LT); :}
				   | LE {: return new Symbol(BinaryOp.LE); :}
				   | GT {: return new Symbol(BinaryOp.GT); :}
				   | GE {: return new Symbol(BinaryOp.GE); :}
;

BitOr = BitXor
	   | BitXor.lhs BITOR BitOr.rhs
	   {:
	   		return new BinaryExpression(BinaryOp.BITOR, lhs, rhs);
	   :}
;
BitXor = BitAnd
	   | BitAnd.lhs BITXOR BitXor.rhs
	   {:
	   		return new BinaryExpression(BinaryOp.BITXOR, lhs, rhs);
	   :}
;
BitAnd = Shift
	   | Shift.lhs AMPERSAND BitAnd.rhs
	   {:
	   		return new BinaryExpression(BinaryOp.BITAND, lhs, rhs);
	   :}
;

Shift = Addition
	  | Addition.lhs ShiftOperator.op Shift.rhs
	  {:
	  	return new BinaryExpression(op, lhs, rhs);
	  :}
;
ShiftOperator = SHL {: return new Symbol(BinaryOp.SHL); :}
			  | SHR {: return new Symbol(BinaryOp.SHR); :}
			  | SHRU {: return new Symbol(BinaryOp.SHRU); :}
;
Addition = Multiplication
		 | Multiplication.lhs AdditionOperator.op Addition.rhs
		 {:
		 	return new BinaryExpression(op, lhs, rhs);
		 :}
;
AdditionOperator = PLUS {: return new Symbol(BinaryOp.PLUS); :}
				 | MINUS {: return new Symbol(BinaryOp.MINUS); :}
;

Multiplication = Unary
			   | Unary.lhs MultiplicationOperator.op Multiplication.rhs
			   {:
			   		return new BinaryExpression(op, lhs, rhs);
			   :}
;
MultiplicationOperator = SLASH {: return new Symbol(BinaryOp.DIV); :} 
					   | STAR  {: return new Symbol(BinaryOp.MUL); :} 
					   | PERCENT {: return new Symbol(BinaryOp.MOD); :}
;

SizeOf = LPAREN SizeOf.s RPAREN
	   | Identifier.i EmptyDims.d? {: return new SizeOf(i, d==null?0:d); :}
;
EmptyDims = LBRACKET RBRACKET
			{: return new Symbol(1); :}
		  | EmptyDims.e LBRACKET RBRACKET
		    {: return new Symbol(e + 1); :}
;
Unary = INC Unary.u {: return new IncDec(UnaryOp.INC, u, false); :} // Increment
	  | DEC Unary.u {: return new IncDec(UnaryOp.DEC, u, false); :} // Decrement
	  | MINUS Unary.u {: return new UnaryExpr(UnaryOp.NEG, u); :} // Negate
	  | BANG Unary.u {: return new UnaryExpr(UnaryOp.INV, u); :}    // Invert
	  | TILDE Unary.u {: return new UnaryExpr(UnaryOp.COMPL, u); :}// Complement
	  | SIZEOF SizeOf.s        // sizeof expression
	  | Label.l Unary.u @ LABEL {: return new UnsafeCast(l, u); :}// unsafe cast
	  | Postfix
;

Postfix = Primary.p INC {: return new IncDec(UnaryOp.INC, p, true); :}
	  	| Primary.p DEC {: return new IncDec(UnaryOp.DEC, p, true); :}
	  	| Primary
;
Primary = Prefix
		| Identifier.name LPAREN ExpressionList.l? RPAREN {: return new Call(name, l==null?new List<Expression>():l); :} // function call
		| ArrayAccess // (multi) array element
;

ArrayAccess = Prefix.base LBRACKET Expression.e RBRACKET
			{:
				return new Index(base, e);
			:}
			| ArrayAccess.l LBRACKET Expression.e RBRACKET
			{:
				return new Index(l, e);
			:}
;

Prefix = LPAREN Expression.e RPAREN {: return new Parenthesis(e); :}
	   | Identifier
	   // no view_as support yet.
	   | Primitive
;
Primitive = FLOATLIT.f {: return new SPFloat(f); :}
		  | INTEGERLIT.i {: return new SPInteger(i); :}
		  | Boolean
		  | STRINGLIT.s {: return new SPString(s); :}
		  | CHARLIT.s {: return new SPString(s); :}
		  | CompoundLiteral
;
Boolean = TRUE {: return new True(); :}
		| FALSE {: return new False(); :}
;

CompoundLiteral = LBRACE ELLIPSES RBRACE {: return new ArrayLiteral(new List(), true); :}
				//| LBRACE RBRACE {: return new ArrayLiteral(new List(), false); :}
				| LBRACE ExpressionList.l COMMA ELLIPSES.e RBRACE {: return new ArrayLiteral(l, true); :}
				| LBRACE ExpressionList.l RBRACE {: return new ArrayLiteral(l, false); :}
;

OperatorOverride = LT | LE | GT | | GE | NE | EQ 
                 | BANG | PLUS | MINUS | STAR | SLASH | PERCENT | INC | DEC
;

IdentOrOperator = IDENTIFIER
                | OPERATOR OperatorOverride.op
                {: return new Symbol("operator" + op.value); :}
;

Identifier = IDENTIFIER.id {: return new IdentUse(id); :};
Label = LABEL.l {: return new Label(l.substring(0, l.length()-1)); :};

Term = SEMICOLON;


//ReservedKeyWord = RESERVED.r {: System.err.println("'" + r + "' is a newly reserved keyword that may be used in the future; use a different name as an identifier"); return r; :};