Preprocessor ::= Statement;
abstract Statement;

// Custom user errors and asserts
UserError:Statement ::= <Error:String>;

// Parse another file
Include:Statement ::= <File:String> <Flags:Integer>;
EndInput:Statement;

// Constant definitions
Define:Statement ::= <Name:String> [Value:Expression];
Undefine:Statement ::= Name:IdentUse;

If:Statement ::= Expr:Expression;
ElseIf:Statement ::= Expr:Expression;
Else:Statement;
EndIf:Statement;

abstract Expression;
BinaryExpression:Expression ::= <Operator:BinaryOp> Left:Expression Right:Expression;
UnaryExpression:Expression ::= <Operator:UnaryOp> Expr:Expression;

abstract Prefix:Expression;
IdentUse:Prefix ::= <ID:String>;

// Primitives
abstract Primitive:Expression;
True:Primitive;
False:Primitive;
SPFloat:Primitive ::= <Float:String>;
SPInteger:Primitive ::= <Integer:String>;
SPString:Primitive ::= <String:String>;
SPCharacter:Primitive ::= <Char:String>;