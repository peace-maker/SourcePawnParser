aspect PrettyPrint {
    public class PrettyPrinter {
        private StringBuilder sb;
	  	public PrettyPrinter(){
	  		sb = new StringBuilder();
	  	}
  
	    public void append(String s) {
	        sb.append(s);
	    }
    
	    public String getString() {
	        return sb.toString();
	    }
    }
    
    syn lazy PrettyPrinter Preprocessor.printer() {
        return new PrettyPrinter();
    }
    eq Preprocessor.getStatement().printer() = this.printer();

    inh lazy PrettyPrinter Statement.printer();
    inh lazy PrettyPrinter Expression.printer();
  
    syn PrettyPrinter Preprocessor.print() {
        getStatement().print();
        return printer();
    }
  
    abstract void Statement.print();
  
    public void UserError.print() {
        printer().append("\n#error " + getError());
    }
    
    public void UserAssert.print() {
        printer().append("\n#assert ");
        getExpr().print();
    }
    
    public void Include.print() {
        if ((getFlags() & IncludeFlags.TRY) > 0)
            printer().append("\n#tryinclude ");
        else
            printer().append("\n#include ");
        
        if ((getFlags() & IncludeFlags.CURRENTPATH) == 0)
            printer().append("<" + getFile() + ">");
        else
            printer().append(getFile());
    }
    
    public void EndInput.print() {
        printer().append("\n#endinput");
    }

    public void Define.print() {
        printer().append("\n#define " + getName());
        if (hasValue()) {
            printer().append(" ");
            getValue().print();
        }
    }
  
    public void Undefine.print() {
        printer().append("\n#undef ");
        getName().print();
    }
    
    public void If.print() {
        printer().append("\n#if ");
        getExpr().print();
    }
    
    public void ElseIf.print() {
        printer().append("\n#elseif ");
        getExpr().print();
    }
    
    public void Else.print() {
        printer().append("\n#else");
    }
    
    public void EndIf.print() {
        printer().append("\n#endif");
    }
    
    public void DeprecatedMsg.print() {
        printer().append("\n#pragma deprecated " + getMessage());
    }
    
    public void RequireSemicolon.print() {
        printer().append("\n#pragma semicolon ");
        getRequired().print();
    }
    
    public void PragmaRational.print() {
        printer().append("\n#pragma rational " + getTag());
    }
  
  
    abstract void Expression.print();
    public void BinaryExpression.print() {
        getLeft().print();
        printer().append(" " + BinaryOperator.binaryOpToString(getOperator()) + " ");
        getRight().print();
    }

    public void UnaryExpression.print() {
        printer().append(UnaryOperator.unaryOpToString(getOperator()));
        getExpr().print();
    }

    public void Defined.print() {
        printer().append("defined ");
        getIdent().print();
    }

    public void IdentUse.print() {
        printer().append(getID());
    }
  
    public void SPInteger.print() {
        printer().append(getInteger());
    }
    public void SPString.print() {
        printer().append(getString());
    }
    public void Literal.print() {
        printer().append(getString());
    }

}
