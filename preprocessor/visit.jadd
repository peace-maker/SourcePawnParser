aspect Visitor {
    public void Statement.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        throw new PreprocessorHandler.Exception("Statement " + getClass().getSimpleName() + " not supported.", this);
    }
    public void Include.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception  {
        visitor.accept(this);
    }
    public void Define.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception  {
        visitor.accept(this);
    }
    public void Undefine.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void UserError.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void UserAssert.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void EndInput.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void If.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void ElseIf.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void Else.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void EndIf.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void DeprecatedMsg.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void RequireSemicolon.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
    public void PragmaRational.visit(PreprocessorHandler visitor) throws PreprocessorHandler.Exception {
        visitor.accept(this);
    }
}